import numpy as np

from . import register_env
from .half_cheetah import HalfCheetahEnv

import pickle
import os

@register_env('cheetah-multi-dir-vel')
class HalfCheetahMultiDirVelEnv(HalfCheetahEnv):
    """Half-cheetah environment with target velocity, as described in [1]. The
    code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/half_cheetah_env_rand.py

    The half-cheetah follows the dynamics from MuJoCo [2], and receives at each
    time step a reward composed of a control cost and a penalty equal to the
    difference between its current velocity and the target velocity. The tasks
    are generated by sampling the target velocities from the uniform
    distribution on [0, 2].

    [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic
        Meta-Learning for Fast Adaptation of Deep Networks", 2017
        (https://arxiv.org/abs/1703.03400)
    [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for
        model-based control", 2012
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """
    def __init__(self, task={}, n_tasks=2, randomize_tasks=True, n_vels=3, min_vel=-5, max_vel=5, max_eps=500, seed=0):
        self._task = task
        self._max_vel = max_vel
        self._min_vel = min_vel
        self._max_eps = max_eps
        self.tasks = self.sample_tasks(n_tasks, n_vels)
        self._num_steps = 0
        self._goal_vels = self.tasks[0]['velocity']
        self._goal_steps = self.tasks[0]['step']
        self._goal_vel = self.tasks[0].get('velocity', [0.0])[0]
        self._goal = self._goal_vel
        super(HalfCheetahMultiDirVelEnv, self).__init__()
        self.seed(seed)

    def step(self, action):
        xposbefore = self.sim.data.qpos[0]
        self.do_simulation(action, self.frame_skip)
        xposafter = self.sim.data.qpos[0]

        forward_vel = (xposafter - xposbefore) / self.dt
        forward_reward = -1.0 * abs(forward_vel - self._goal_vel)
        ctrl_cost = 0.5 * 1e-1 * np.sum(np.square(action))

        observation = self._get_obs()
        reward = forward_reward - ctrl_cost
        done = False
        infos = dict(reward_forward=forward_reward,
            reward_ctrl=-ctrl_cost, task=self._task)
        self._num_steps += 1

        self._goal_vel = self._goal_vels[np.searchsorted(self._goal_steps, self._num_steps)]
        return (observation, reward, done, infos)

    def sample_tasks(self, num_tasks, num_vels):
        np.random.seed(1337)
        num_sampled = 0
        velocities = []
        while num_sampled < num_tasks:
            sampled_data = np.random.uniform(self._min_vel, self._max_vel, size=(num_vels))
            if num_vels == 3 and self._min_vel < 0:
                if (sampled_data[0] < 0 and sampled_data[1] < 0 and sampled_data[2] < 0) or (sampled_data[0] > 0 and sampled_data[1] > 0 and sampled_data[2] > 0):
                    continue
            velocities.append(sampled_data)
            num_sampled += 1
        velocities = np.array(velocities)
        change_steps = np.sort(np.array([self._max_eps * i / num_vels for i in range(1, num_vels)]) + np.random.uniform(-30, 30, size=(num_tasks, num_vels - 1)))
        tasks = []
        for i in range(num_tasks):
            tasks.append({'velocity': velocities[i], 'step': change_steps[i]})
        return tasks

    def get_all_task_idx(self):
        return range(len(self.tasks))

    def reset_task(self, idx):
        self._task = self.tasks[idx]
        self._num_steps = 0
        self._goal_steps = self._task['step']
        self._goal_vels = self._task['velocity']
        self._goal_vel = self._goal_vels[np.searchsorted(self._goal_steps, self._num_steps)]
        self._goal = self._goal_vel
        self.reset()

    def save_all_tasks(self, save_dir):
        with open(os.path.join(save_dir, 'goals.pkl'), 'wb') as f:
            pickle.dump(self.tasks, f)